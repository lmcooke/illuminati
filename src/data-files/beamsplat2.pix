#version 410
#define M_PI 3.1415926535897932384626433832795

uniform vec2 Resolution;

in vec2 uv;
in vec2 start_pt;
in vec2 end_pt;
in vec2 start_v;
in vec2 end_v;
in vec3 power;

out vec3 g3d_FragColor;

// project a on b
float project_dist(vec2 a, vec2 b) {
    return dot(normalize(a), normalize(b)) * length(a);
}

void main(void) {

    vec2 startpt = start_pt;
    vec2 endpt = end_pt;
    vec2 coord = gl_FragCoord.xy / Resolution;

    vec2 pos = gl_FragCoord.xy;
    vec2 beam = endpt - startpt;

    float proj = project_dist(coord - startpt, beam);
    vec2 pt = startpt + proj * normalize(beam);

    vec2 s_proj = project_dist(start_v, beam) * beam;
    vec2 e_proj = project_dist(end_v, beam) * beam;
    float s_rad = length(s_proj - start_v);
    float e_rad = length(e_proj - end_v);

    vec2 val = abs(coord - startpt);
    //val = startpt.x / vec2(1.0);
    //val = mix(s_rad, e_rad, val);



    g3d_FragColor = vec3(startpt.xy, 1.0);
    if (startpt.y > 1.0) {
        g3d_FragColor = vec3(0.0, 1.0, 0.0);
    }
    if (startpt.x > 1.0) {
        g3d_FragColor = vec3(0.0, 1.0, 1.0);
    }

    //g3d_FragColor = vec3(1.0, 0.0, 1.0);

    //float val = sin((0.5 - length(pt - pos)) * M_PI / 2.0);
    //float val = sin((0.5 - abs(uv.y - 0.5)) * M_PI / 2.0);
    //g3d_FragColor = vec3(val * power);
}
